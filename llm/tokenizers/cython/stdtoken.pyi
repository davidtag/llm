"""Cython data types for handling tokenization."""

class TokenPair:
    """Stores an immutable pair of tokens.

    An instance of this type occupies 32 bytes of memory, compared to 56 bytes for a tuple
    of two ints. It is also about 30% faster when building a dict of TokenPair instead of
    a dict of Tuple[int, int].
    """

    def __init__(self, first: int, second: int) -> None: ...
    @property
    def first(self) -> int: ...
    @property
    def second(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: TokenPair) -> bool: ...
    def __hash__(self) -> int: ...

class TokenPairNode:
    """A single node in a min-heap, representing a TokenPair and it's frequency in a token sequence.

    Implements `<` comparison to order by max-count, with tie-breaking by token values in ascending order.

    We store the TokenPair data directly in-line to avoid Python object overhead.
    """

    def __init__(self, first: int, second: int, count: int, deleted: bool = False) -> None: ...
    @property
    def first(self) -> int: ...
    @property
    def second(self) -> int: ...
    @property
    def pair(self) -> TokenPair: ...
    @property
    def count(self) -> int: ...
    @count.setter
    def count(self, count: int) -> None: ...
    @property
    def deleted(self) -> bool: ...
    @deleted.setter
    def deleted(self, deleted: bool) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: TokenPairNode) -> bool: ...
